<?php
/**
 * @file
 * Code for the GSB Social feature.
 */

include_once 'gsb_social.features.inc';


/**
 * Implement hook_libraries_info().
 */
function gsb_social_libraries_info() {
  $libraries['sharrre'] = array(
    'name' => 'sharrre',
    'vendor url' => 'https://github.com/gsbitse/Sharrre',
    'download url' => 'https://github.com/gsbitse/Sharrre',
    'version' => 'release-1.0',
    'files' => array(
      'js' => array(
        'jquery.sharrre.js',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_page_build().
 */
function gsb_social_page_build(&$page) {
  libraries_load('sharrre');
}

/**
 * Implements hook_menu().
 */
function gsb_social_menu() {
  $items['gsb-social/sharrre'] = array(
    'title' => 'GSB Social Count',
    'description' => 'Retrieves the count',
    'page callback' => 'gsb_social_count',
    'access arguments' => array('access content')
  );
  return $items;
}

function gsb_social_count() {
  $url = urlencode($_GET['url']);
  $json = array('url'=>$url,'count'=>0);
  $plus_count = 0;
  $contents = _gsb_social_parse('https://plusone.google.com/u/0/_/+1/fastbutton?url=' . $url . '&count=true');
  preg_match( '/window\.__SSR = {c: ([\d]+)/', $contents, $matches );
  if(isset($matches[0])){
    $plus_count = (int)str_replace('window.__SSR = {c: ', '', $matches[0]);
  }
  $json['count'] = $plus_count;
  echo str_replace('\\/','/',json_encode($json));
  return;
}

function gsb_social_block_info() {
  $blocks['gsb_social_buttons'] = array(
    'info' => t('Social buttons'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

function gsb_social_block_view($delta = '') {
  if ($delta == 'gsb_social_buttons') {

    drupal_add_js(drupal_get_path('module', 'gsb_social') . '/js/gsb_social.js');
    drupal_add_css(drupal_get_path('module', 'gsb_social') . '/css/gsb_social.css');

    $block['subject'] = t('Social');
    $node = menu_get_object();
    $block['content'] = array(
      '#theme' => 'gsb_social_buttons',
      '#object' => !empty($node) ? $node : NULL,
    );

    return $block;
  }
}
/**
 * Implements hook_theme().
 *  - Define social button theming functions.
 */
function gsb_social_theme() {
  return array(
    'gsb_social_buttons' => array(
      'variables' => array('object' => NULL, 'options' => array()),
    ),
    'gsb_twitter_button' => array(
      'variables' => array('object' => NULL, 'options' => array()),
    ),
    'gsb_facebook_share' => array(
      'variables' => array('object' => NULL, 'options' => array()),
    ),
    'gsb_gplus_button' => array(
      'variables' => array('object' => NULL, 'options' => array()),
    ),
    'gsb_linkedin_button' => array(
      'variables' => array('object' => NULL, 'options' => array()),
    ),
  );
}

/**
 * Render social buttons.
 */
function theme_gsb_social_buttons($variables) {
  if (!empty($variables['object'])) {
    // Use absolute URL built with entity_uri to avoid posting with node/nid URLs when aliases available.
    $uri = entity_uri('node', $variables['object']);
    $uri = url($uri['path'], array('absolute' => TRUE));

    // Allow URL option to be defined from outside, as well as any other options reusable by all widgets.
    // URL is defaulted to entity_uri.
    $variables['options'] = $variables['options'] + array('uri' => $uri);
  }

  // Iterate throw plugins and call their own theming function.
  $plugins = array('gsb_twitter_button', 'gsb_facebook_share', 'gsb_gplus_button', 'gsb_linkedin_button');

  $items = array();
  foreach ($plugins as $plugin) {
    $items[] = theme($plugin, array('object' => $variables['object'], 'options' => $variables['options']));
  }

  return theme('item_list', array('items' => $items, 'type' => 'ul', 'attributes' => array('class' => 'gsb-social-buttons')));
}

/**
 * Render twitter button
 */
function theme_gsb_twitter_button($variables) {
  $url = _gsb_social_get_short_url($variables['object']);
  $output =
    '<div class="sharrre-twitter" data-url="' . $url . '" data-text="" data-title="Tweet"></div>';
  return $output;
}

/**
 * Render facebook button
 */
function theme_gsb_facebook_share($variables) {
  $url = _gsb_social_get_short_url($variables['object']);
  $output =
    '<div class="sharrre-facebook" data-url="' . $url . '" data-text="" data-title="Share"></div>';
  return $output;
}

/**
 * Render Google Plus button.
 */
function theme_gsb_gplus_button($variables) {
  $url = _gsb_social_get_short_url($variables['object']);
  $output =
    '<div class="sharrre-googleplus" data-url="' . $url . '" data-text="" data-title="+1"></div>';
  return $output;
}

/**
 * Render Linkedin button.
 */
function theme_gsb_linkedin_button($variables) {
  $url = _gsb_social_get_short_url($variables['object']);
  $output =
    '<div class="sharrre-linkedin" data-url="' . $url . '" data-text="" data-title="LinkedIn"></div>';
  return $output;
}

function _gsb_social_parse($encUrl) {
  $options = array(
    CURLOPT_RETURNTRANSFER => true, // return web page
    CURLOPT_HEADER => false, // don't return headers
    CURLOPT_FOLLOWLOCATION => true, // follow redirects
    CURLOPT_ENCODING => "", // handle all encodings
    CURLOPT_USERAGENT => 'sharrre', // who am i
    CURLOPT_AUTOREFERER => true, // set referer on redirect
    CURLOPT_CONNECTTIMEOUT => 5, // timeout on connect
    CURLOPT_TIMEOUT => 10, // timeout on response
    CURLOPT_MAXREDIRS => 3, // stop after 10 redirects
    CURLOPT_SSL_VERIFYHOST => 0,
    CURLOPT_SSL_VERIFYPEER => false,
  );
  $ch = curl_init();

  $options[CURLOPT_URL] = $encUrl;
  curl_setopt_array($ch, $options);

  $content = curl_exec($ch);
  $err = curl_errno($ch);
  $errmsg = curl_error($ch);

  curl_close($ch);

  if ($errmsg != '' || $err != '') {
    /*print_r($errmsg);
    print_r($errmsg);*/
  }
  return $content;
}

function _gsb_social_get_short_url($node) {
  global $base_url;
  $url = '';
  if (in_array($node->type, array('idea_story','school_story', 'announcement'))) {
    if (!empty($node->field_link_single)) {
      $url = $node->field_link_single[$node->language][0]['url'];
    }
  }
  if ($url == '') {
    $url = $base_url . '/' . request_path();
  }
  return $url;
}

/**
 * Implements hook_node_view().
 *
 * Set Google Analytics dimensions - key taxonomies and node type
 */
function gsb_social_node_view($node, $view_mode) {
  /*
   * We can remove this if the google analytics module custom
   * dimensions works
   *
  $types = array('announcement', 'idea_story', 'school_story');
  if (in_array($node->type, $types) && $view_mode == 'full') {
    $language = $node->language;
    $key_tax_id1 = -1;
    $term1 = '';
    if (!empty($node->field_key_taxonomy[$language][0]['target_id'])) {
      $key_tax_id1 = $node->field_key_taxonomy[$language][0]['target_id'];
      $term1 = taxonomy_term_load($key_tax_id1);
      $term1 = $term1->name;
    }
    $key_tax_id2 = -1;
    $term2 = '';
    if (!empty($node->field_key_taxonomy[$language][1]['target_id'])) {
      $key_tax_id2 = $node->field_key_taxonomy[$language][1]['target_id'];
      $term2 = taxonomy_term_load($key_tax_id2);
      $term2 = $term2->name;
    }
    $key_tax_id3 = -1;
    $term3 = '';
    if (!empty($node->field_key_taxonomy[$language][2]['target_id'])) {
      $key_tax_id3 = $node->field_key_taxonomy[$language][2]['target_id'];
      $term3 = taxonomy_term_load($key_tax_id3);
      $term3 = $term3->name;
    }
    drupal_add_js(array('gsb_social' => array(
      'type' => $node->type,
      'key_tax1' => $term1,
      'key_tax2' => $term2,
      'key_tax3' => $term3,
    )), 'setting');
  }
  */
}